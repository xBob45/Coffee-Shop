#src/controllers/authController.py
def login():
    if request.method == 'POST':
        try:
            #BruteForce-2 - START
            #BruteForce-2 - END
            validate_csrf(request.form.get('csrf_token'))
            username = request.form.get('username')
            password = request.form.get('password')
            remember = True if request.form.get('remember') else False
            user = User.query.filter_by(username=username).first()  
            if user is not None:
                #CompleteOmissionOfHashFunction-2 - START
                #CompleteOmissionOfHashFunction-2 - END
                #WeakHashFunction-2 - START
                #WeakHashFunction-2 - END
                #WeakHashFunctionWithSalt-2 - START
                #WeakHashFunctionWithSalt-2 - END 
                    #InsertionOfSensitiveInformationIntoLogFile-2 - START
                    #InsertionOfSensitiveInformationIntoLogFile-2 - END

                    #SensitiveInformationDisclosure-1 - START
                    #SensitiveInformationDisclosure-1 - END
                    return redirect(request.referrer)
                else:
                    # Perform the login action or redirect to the home page
                    login_user(user, remember=remember)
                    session['cart'] = {}
                    session['total'] = 0

                    #InsertionOfSensitiveInformationIntoLogFile-1 - START
                    #InsertionOfSensitiveInformationIntoLogFile-1 - END

                    #SensitiveDatawithinCookie-1 - START
                    #SensitiveDatawithinCookie-1 - END
                    return redirect(url_for('home.home'))
            else:
                #ReflectedXSS-1 - START
                #ReflectedXSS-1 - END
                #InsertionOfSensitiveInformationIntoLogFile-3 - START
                #InsertionOfSensitiveInformationIntoLogFile-3 - END   
                return redirect(request.referrer)
        except ValidationError:
            log_config.logger.error("Missing or invalid CSRF token.", extra={'ip_address': request.remote_addr})
            abort(400)
        except BadRequest:
            log_config.logger.error("Failed reCAPTCHA.", extra={'ip_address': request.remote_addr})
            abort(400)
        except argon2.exceptions.VerifyMismatchError:
            #InsertionOfSensitiveInformationIntoLogFile-2 - START
            #InsertionOfSensitiveInformationIntoLogFile-2 - END
            #SensitiveInformationDisclosure-1 - START
            #SensitiveInformationDisclosure-1 - END
        except Exception as e:
            log_config.logger.info("Error occured, try again. Exception: %s" % e, extra={'ip_address': request.remote_addr})
            flash("Unexpected error. Try again, please.", 'danger')
            return redirect(request.referrer)  
    #BruteForce-3 - START
    #BruteForce-3 - END